<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd">
    <!-- 启用spring mvc 注解 -->
    <context:annotation-config/>
    <!-- 自动扫描 配置下spring的扫描器就可以实现bean的自动载入-->
    <context:component-scan base-package="com.ssm.demo"/>
    <!--<context:component-scan base-package="com.ssm.demo.dao"/>-->
    <!--<context:component-scan base-package="com.ssm.demo.service"/>-->
    <!--<context:component-scan base-package="com.ssm.demo.service.impl"/>-->

    <aop:aspectj-autoproxy proxy-target-class="true" />

    <bean id="empImpl" class="com.ssm.demo.service.EmpImpl"/>
    <bean id="pUserImpl" class="com.ssm.demo.service.PUserImpl"/>
    <!-- 视图模式配置 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>
    <!--配置jackson，可以以json格式做入参出参 -->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>application/json;charset=UTF-8</value>
                        <value>text/plain;charset=UTF-8</value>
                    </list>
                </property>
            </bean>
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <mvc:default-servlet-handler/>
    <!--静态资源处理,
    静态资源映射，对静态资源文件的访问， 将无法mapping到Controller的path交给default servlet handler处理,
    传统Web容器的静态资源只能放在Web容器的根路径下，<mvc:resources />完全打破了这个限制-->
    <mvc:resources mapping="/static/**" location="/static/"/>

    <!--避免IE执行AJAX时，返回JSON出现下载文件 -->
    <bean id="mappingJacksonHttpMessageConverter"
          class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/html;charset=UTF-8</value>
            </list>
        </property>
    </bean>
    <!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="messageConverters">
            <list>
                <ref bean="mappingJacksonHttpMessageConverter"/><!-- JSON转换器 -->
            </list>
        </property>
    </bean>

    <!-- log4j start -->
    <!-- 使用xml配置aop ,引入AOP的命名空间 强制使用cglib代理，如果不设置，将默认使用jdk的代理，但是jdk的代理是基于接口的 -->
    <aop:config proxy-target-class="true" />
    <aop:config>
        <!--定义切面-->
        <aop:aspect id="logAspect" ref="logInterceptor">
            <!--定义切入点-->
            <aop:pointcut expression="execution(* com.ssm.demo.controller.*.*(..))"  id="logPointCut"/>
            <!--方法执行之前被调用执行的-->
            <!--<aop:before method="before" pointcut-ref="logPointCut"/>&lt;!&ndash;一个切入点的引用&ndash;&gt;-->
            <!--<aop:after method="after" pointcut-ref="logPointCut"/>&lt;!&ndash;一个切入点的引用&ndash;&gt;-->
            <!--<aop:after-throwing method="afterThrowing" pointcut-ref="logPointCut" />-->
            <!--<aop:after-returning method="afterReturn" pointcut-ref="logPointCut" />-->
            <aop:around method="around" pointcut-ref="logPointCut"/>
        </aop:aspect>
    </aop:config>
    <!-- log4j end -->

    <!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
    <!--<bean id="multipartResolver"-->
    <!--class="org.springframework.web.multipart.commons.CommonsMultipartResolver">-->
    <!--&lt;!&ndash; 默认编码 &ndash;&gt;-->
    <!--<property name="defaultEncoding" value="utf-8" />-->
    <!--&lt;!&ndash; 上传文件最大值 &ndash;&gt;-->
    <!--<property name="maxUploadSize" value="10485760000"/>-->
    <!--&lt;!&ndash; 内存中的最大值 &ndash;&gt;-->
    <!--<property name="maxInMemorySize" value="40960"/>-->
    <!--&lt;!&ndash; 启用是为了推迟文件解析，以便捕获文件大小异常 &ndash;&gt;-->
    <!--<property name="resolveLazily" value="true"/>-->
    <!--</bean>-->

    <!-- 配置拦截器 -->
    <!--<mvc:interceptors>-->
        <!--<mvc:interceptor>-->
            <!--&lt;!&ndash; 匹配的是url路径， 如果不配置或/**,将拦截所有的Controller   &ndash;&gt;-->
            <!--<mvc:mapping path="/data/**" />-->
            <!--&lt;!&ndash; 不拦截的连接 &ndash;&gt;-->
            <!--<mvc:exclude-mapping path="/login/**"/>-->
            <!--<mvc:exclude-mapping path="/register/**"/>-->
            <!--<mvc:exclude-mapping path="index.jsp"/>-->
            <!--<mvc:exclude-mapping path="/index.jsp"/>-->
            <!--<mvc:exclude-mapping path="/static/**"/>-->
            <!--<bean class="com.ssm.demo.controller"></bean>-->
        <!--</mvc:interceptor>-->
        <!--&lt;!&ndash;   当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法   &ndash;&gt;-->
    <!--</mvc:interceptors>-->


</beans>